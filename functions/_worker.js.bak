import Stripe from 'stripe';

export function onRequest(context) {
  const request = context.request;
  const env = context.env;
    try {
      const url = new URL(request.url);
      console.log('Request URL:', url.pathname);
      console.log('Request method:', request.method);
      
      // Handle CORS preflight requests
      if (request.method === "OPTIONS") {
        return new Response(null, {
          headers: {
            "Access-Control-Allow-Origin": "*",
            "Access-Control-Allow-Methods": "GET, POST, OPTIONS",
            "Access-Control-Allow-Headers": "Content-Type, stripe-signature",
          },
        });
      }

      // Create Payment Intent endpoint
      if (url.pathname === "/api/create-payment-intent" && request.method === "POST") {
        console.log('Attempting to create payment intent...');
        
        try {
          // Initialize Stripe with the key from env
          const stripe = new Stripe(env.STRIPE_SECRET_KEY || '', {
            apiVersion: '2023-10-16',
          });

          const body = await request.json();
          console.log('Request body:', body);

          const { amount, currency = "gbp" } = body;
          
          if (!amount) {
            throw new Error('Amount is required');
          }

          console.log('Creating payment intent:', { amount, currency });

          const paymentIntent = await stripe.paymentIntents.create({
            amount: Math.round(amount * 100), // Convert to cents/pence
            currency,
            automatic_payment_methods: {
              enabled: true,
            },
          });

          console.log('Payment intent created:', paymentIntent.id);

          return new Response(JSON.stringify({ 
            clientSecret: paymentIntent.client_secret,
            paymentIntentId: paymentIntent.id 
          }), {
            headers: {
              "Content-Type": "application/json",
              "Access-Control-Allow-Origin": "*",
            },
          });
        } catch (error) {
          console.error('Error creating payment intent:', error);
          return new Response(JSON.stringify({ 
            error: error.message 
          }), { 
            status: 400,
            headers: {
              "Content-Type": "application/json",
              "Access-Control-Allow-Origin": "*",
            },
          });
        }
      }

      // Webhook endpoint
      if (url.pathname === "/webhook" && request.method === "POST") {
        console.log('Webhook request received');
        const signature = request.headers.get("stripe-signature");
        
        try {
          const stripe = new Stripe(env.STRIPE_SECRET_KEY || '', {
            apiVersion: '2023-10-16',
          });
          
          const event = await stripe.webhooks.constructEvent(
            await request.text(),
            signature || '',
            env.STRIPE_WEBHOOK_SECRET || ''
          );

          console.log('Webhook event type:', event.type);

          switch (event.type) {
            case "payment_intent.succeeded":
              const paymentIntent = event.data.object;
              console.log("Payment succeeded:", paymentIntent.id);
              break;
            // Add other webhook events as needed
          }

          return new Response(JSON.stringify({ received: true }), {
            headers: { 
              "Content-Type": "application/json",
              "Access-Control-Allow-Origin": "*",
            },
          });
        } catch (error) {
          console.error('Webhook error:', error);
          return new Response(JSON.stringify({ 
            error: error.message 
          }), { 
            status: 400,
            headers: {
              "Content-Type": "application/json",
              "Access-Control-Allow-Origin": "*",
            },
          });
        }
      }

      // Return 404 for any other paths
      return new Response("Not found", { 
        status: 404,
        headers: {
          "Access-Control-Allow-Origin": "*",
        }
      });
    } catch (err) {
      console.error('Server error:', err);
      return new Response(JSON.stringify({
        error: err.message
      }), { 
        status: 500,
        headers: {
          "Content-Type": "application/json",
          "Access-Control-Allow-Origin": "*",
        }
      });
    }
  },
};
